# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sn_pb2 as sn__pb2


class SocNetStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Do = channel.unary_unary(
                '/reverse.SocNet/Do',
                request_serializer=sn__pb2.Request.SerializeToString,
                response_deserializer=sn__pb2.Response.FromString,
                )
        self.UserAddPost = channel.unary_unary(
                '/reverse.SocNet/UserAddPost',
                request_serializer=sn__pb2.PostData.SerializeToString,
                response_deserializer=sn__pb2.Response.FromString,
                )
        self.UserLikePost = channel.unary_unary(
                '/reverse.SocNet/UserLikePost',
                request_serializer=sn__pb2.PostData.SerializeToString,
                response_deserializer=sn__pb2.Response.FromString,
                )
        self.UserCommentPost = channel.unary_unary(
                '/reverse.SocNet/UserCommentPost',
                request_serializer=sn__pb2.PostData.SerializeToString,
                response_deserializer=sn__pb2.Response.FromString,
                )
        self.UserList = channel.unary_unary(
                '/reverse.SocNet/UserList',
                request_serializer=sn__pb2.Request.SerializeToString,
                response_deserializer=sn__pb2.Response.FromString,
                )
        self.UserLenta = channel.unary_unary(
                '/reverse.SocNet/UserLenta',
                request_serializer=sn__pb2.Request.SerializeToString,
                response_deserializer=sn__pb2.ResponseLenta.FromString,
                )


class SocNetServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Do(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserAddPost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserLikePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserCommentPost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserLenta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SocNetServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Do': grpc.unary_unary_rpc_method_handler(
                    servicer.Do,
                    request_deserializer=sn__pb2.Request.FromString,
                    response_serializer=sn__pb2.Response.SerializeToString,
            ),
            'UserAddPost': grpc.unary_unary_rpc_method_handler(
                    servicer.UserAddPost,
                    request_deserializer=sn__pb2.PostData.FromString,
                    response_serializer=sn__pb2.Response.SerializeToString,
            ),
            'UserLikePost': grpc.unary_unary_rpc_method_handler(
                    servicer.UserLikePost,
                    request_deserializer=sn__pb2.PostData.FromString,
                    response_serializer=sn__pb2.Response.SerializeToString,
            ),
            'UserCommentPost': grpc.unary_unary_rpc_method_handler(
                    servicer.UserCommentPost,
                    request_deserializer=sn__pb2.PostData.FromString,
                    response_serializer=sn__pb2.Response.SerializeToString,
            ),
            'UserList': grpc.unary_unary_rpc_method_handler(
                    servicer.UserList,
                    request_deserializer=sn__pb2.Request.FromString,
                    response_serializer=sn__pb2.Response.SerializeToString,
            ),
            'UserLenta': grpc.unary_unary_rpc_method_handler(
                    servicer.UserLenta,
                    request_deserializer=sn__pb2.Request.FromString,
                    response_serializer=sn__pb2.ResponseLenta.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reverse.SocNet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SocNet(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Do(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reverse.SocNet/Do',
            sn__pb2.Request.SerializeToString,
            sn__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserAddPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reverse.SocNet/UserAddPost',
            sn__pb2.PostData.SerializeToString,
            sn__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserLikePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reverse.SocNet/UserLikePost',
            sn__pb2.PostData.SerializeToString,
            sn__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserCommentPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reverse.SocNet/UserCommentPost',
            sn__pb2.PostData.SerializeToString,
            sn__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reverse.SocNet/UserList',
            sn__pb2.Request.SerializeToString,
            sn__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserLenta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reverse.SocNet/UserLenta',
            sn__pb2.Request.SerializeToString,
            sn__pb2.ResponseLenta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
